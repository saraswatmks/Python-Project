---
apiVersion: v1
kind: Template
metadata:
  name: vision
  annotations:
    description: "PnR Vision service"
    tags: "relevance,personalization,ragnarok,pnr,ltr"

parameters:
- name: REPLICAS
  description: Number of REPLICAS
  value: "1"
  required: true

- name: IMAGE
  description: Docker image
  required: true

- name: IMAGE_TAG
  description: Docker image tag
  value: "latest"
  required: false

- name: HOSTNAME_SUFFIX
  description: Route api suffix
  required: true

- name: MEMORY
  description: MEMORY limit
  value: 1Gi
  required: true

- name: CPU
  description: CPU limit
  value: "1"
  required: true

- name: CONTAINER_HTTP_PORT
  value: "5000"
  required: true

- name: HEALTH_CHECK_PATH
  required: true
  value: /alive

- name: READY_CHECK_PATH
  required: true
  value: /ready

- name: IAM_ARN
  description: IAM role to access s3 bucket
  required: true

objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: vision
    namespace: relevance
    labels:
      app: vision

  spec:
    ports:
    - name: http
      port: ${CONTAINER_HTTP_PORT}
      targetPort: http
    selector:
      app: vision
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Route
  metadata:
    name:  vision-internal
    labels:
      app: vision
      router: internal-router
  spec:
    host: vision.internal.${HOSTNAME_SUFFIX}
    to:
      kind: Service
      name: vision
    port:
      targetPort: http
  status:
    ingress:
    - conditions:
      routerName: internal-router

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: vision
    namespace: relevance
    labels:
      template: vision
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 300
        maxUnavailable: 0%
        maxSurge: 100%
    replicas: ${REPLICAS}
    selector:
      app: vision
    template:
      metadata:
        labels:
          app: vision
        annotations:
          iam.amazonaws.com/role: "${IAM_ARN}"
      spec:
        containers:
        - name: vision
          image: ${IMAGE}:${IMAGE_TAG}
          ports:
          - name: http
            containerPort: "${CONTAINER_HTTP_PORT}"
            protocol: TCP
          volumeMounts:
          - name: config
            readOnly: true
            mountPath: /config
          env:
          - name: NEW_RELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                name: newrelic
                key: key
          - name: CONFIG_DIR
            value: /config
          resources:
            limits:
              cpu: ${CPU}
              memory: ${MEMORY}
          readinessProbe:
            httpGet:
              path: ${READY_CHECK_PATH}
              port: http
              scheme: HTTP
            initialDelaySeconds: 35
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: ${HEALTH_CHECK_PATH}
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          imagePullPolicy: Always
        nodeSelector:
          role: autoscaling
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - name: config
          configMap:
            name: vision
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: git-naspersclassifieds-docker-pull


